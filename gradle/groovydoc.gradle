apply plugin: 'groovy'

def groovydocSpec = {
    use = true
    if (project != rootProject) source = project.sourceSets.main.groovy + project.sourceSets.main.java
    groovyClasspath = project.configurations.documentation

    overviewText = project.resources.text.fromFile(rootProject.file('src/main/java/overview.html'))
    includePrivate = false
    link 'https://docs.oracle.com/javase/8/docs/api/', 'java.', 'org.xml.', ' javax.xml.', 'javax.sql.', 'javax.net.', 'org.w3c.'
    link 'https://commons.apache.org/proper/commons-cli/javadocs/api-release/', 'org.apache.commons.cli.'
    link 'https://bitcoinj.github.io/javadoc/0.15.7/', 'org.bitcoin.', 'org.bitcoinj.'
    link 'https://consensusj.github.io/consensusj/apidoc/', 'com.msgilligan.bitcoinj.', 'org.consensusj.'

}

allprojects {
    apply plugin: 'groovy'

    configurations {
        // set up `documentation` configuration for groovydoc
        documentation.extendsFrom implementation
    }

    dependencies {
        documentation 'com.github.javaparser:javaparser-core:3.15.14'
        documentation "org.codehaus.groovy:groovy-ant:${groovyVersion}"
        documentation "org.codehaus.groovy:groovy-templates:${groovyVersion}"
    }

    groovydoc groovydocSpec
}

task groovydocAll(type: Groovydoc)
groovydocAll {
    destinationDir = new File(buildDir, 'allgroovydoc')
    source = groovydoc.source
    classpath = groovydoc.classpath
    groovyClasspath = groovydoc.groovyClasspath
    subprojects.each { sp ->
        source += sp.groovydoc.source
        classpath += sp.groovydoc.classpath
        groovyClasspath += sp.groovydoc.groovyClasspath
    }
}
groovydocAll groovydocSpec
