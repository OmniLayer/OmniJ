apply plugin: 'groovy'

def groovydocSpec = {
    use = true
    if (project != rootProject) source = project.sourceSets.main.groovy + project.sourceSets.main.java
    groovyClasspath = project.configurations.jansi

    overviewText = project.resources.text.fromFile(rootProject.file('src/main/java/overview.html'))
    includePrivate = false
    link 'http://docs.oracle.com/javase/7/docs/api/', 'java.', 'org.xml.', ' javax.xml.', 'javax.sql.', 'javax.net.', 'org.w3c.'
    link 'http://commons.apache.org/proper/commons-cli/javadocs/api-release/', 'org.apache.commons.cli.'
    link 'https://bitcoinj.github.io/javadoc/0.13.2/', 'org.bitcoin.', 'org.bitcoinj.'
    link 'https://msgilligan.github.io/bitcoinj-addons/apidoc/', 'com.msgilligan.bitcoinj.'

}

allprojects {
    apply plugin: 'groovy'

    configurations {
        // jansi configuration is a workaround for a broken transitive dependency
        // See: http://forums.gradle.org/gradle/topics/gradle_task_groovydoc_failing_with_noclassdeffounderror
        jansi.extendsFrom(runtime)
    }

    dependencies {
        jansi 'org.fusesource.jansi:jansi:1.11'         // Transitive dependency of GroovyDoc
        jansi "org.codehaus.groovy:groovy-ant:${groovyVersion}"    // used in Groovy doc
    }

    groovydoc groovydocSpec
}

task groovydocAll(type: Groovydoc)
groovydocAll {
    destinationDir = new File(buildDir, 'allgroovydoc')
    source = groovydoc.source
    classpath = groovydoc.classpath
    groovyClasspath = groovydoc.groovyClasspath
    subprojects.each { sp ->
        source += sp.groovydoc.source
        classpath += sp.groovydoc.classpath
        groovyClasspath += sp.groovydoc.groovyClasspath
    }
}
groovydocAll groovydocSpec
