buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'com.jfrog.bintray'           version '1.8.4' apply false
}

// See gradle.properties for some dependency version settings

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        uploadInBackground = false
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    //apply plugin: 'findbugs'
    //apply plugin: 'pmd'

    version = omnijVersion
    group = 'foundation.omni'

    repositories {
        jcenter()
        // mavenLocal()   // Uncomment to work with local snapshots
        maven { url 'https://dl.bintray.com/msgilligan/maven' } // ConsensusJ (RPC client)
    }

//    tasks.withType(FindBugs) {
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//    }
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testImplementation "${consensusjGroup}:${consensusjBtcDslArtifact}:${consensusjVersion}"
        testImplementation "junit:junit:4.13"
        testImplementation "org.codehaus.groovy:groovy:${groovyVersion}:indy"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }
        testImplementation "org.spockframework:spock-junit4:${spockVersion}"
        testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"     // Runtime implementation of slf4j for tests
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
    }

    tasks.withType(AbstractArchiveTask) {
        // This should result in reproducible JAR builds
        // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/groovydoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/bintray.gradle'

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

task buildCI(dependsOn: [build, testReport, groovydocAll, asciidoctor])

