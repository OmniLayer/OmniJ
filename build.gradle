buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish'  version '4.2.0'
}

// See gradle.properties for some dependency version settings

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        uploadInBackground = false
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    //apply plugin: 'findbugs'
    //apply plugin: 'pmd'

    version = omnijVersion
    group = 'foundation.omni'

    repositories {
        mavenCentral()
        if (useMavenLocal == "true") {
            mavenLocal()
        }
        maven { url 'https://gitlab.com/api/v4/projects/8482916/packages/maven' } // ConsensusJ (RPC client)
    }

//    tasks.withType(FindBugs) {
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//    }
}

subprojects {
    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testImplementation ("com.msgilligan:cj-bitcoinj-dsl-gvy:${consensusjVersion}" , {
            // These exclusions can be removed when ConsensusJ upgrades to Groovy 4.0
            exclude group: 'org.codehaus.groovy', module: 'groovy'
            exclude group: 'org.codehaus.groovy', module: 'groovy-json'
        })
        testImplementation "org.apache.groovy:groovy:${groovyVersion}"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"     // Runtime implementation of slf4j for tests
    }

    configurations.configureEach {
        // Ensure usage of Groovy 4.0 which has new Maven co-ordinates
        resolutionStrategy.capabilitiesResolution.all {
            if (capability.group.equals("org.codehaus.groovy")) {
                selectHighestVersion()
            }
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.release = 11
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        // This should result in reproducible JAR builds
        // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/groovydoc.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/maven-publish.gradle'
apply from: 'gradle/github-pages.gradle'

tasks.register('testReport', TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

tasks.register('buildCI') { dependsOn build, testReport, javadocAll, groovydocAll, asciidoctor }

