// Work-in-progress support for building CLI tools
plugins {
    id 'application'
}

ext.moduleName = 'foundation.omni.cli'

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation (project(':omnij-rpc'), {
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-json'
    })

    implementation "com.msgilligan:cj-btc-cli:${consensusjVersion}"

    runtimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"
}

application {
    mainClass = 'foundation.omni.cli.ConsensusCLI'
    applicationName = 'ConsensusCLI'
}

run {
// Local vs remote omniwallet
    args = [ '-verbose', '-rpcwait', '-rpcconnect=127.0.0.1', '-property=1', '-compare', '-omniwallet-url=https://www.omniwallet.org']   // Local vs remote omniwallet

// Local vs remote omniwallet ALL PROPERTIES
//    args = [ '-verbose', '-rpcwait', '-rpcconnect=127.0.0.1', '-compare', '-omniwallet-url=https://www.omniwallet.org']

// Local vs "remote" Omni Core RegTest ALL PROPERTIES
//    args = [ '-verbose', '-regtest', '-rpcwait', '-rpcconnect=127.0.0.1', '-compare', "--omnicore-url=http://${rpcTestUser}:${rpcTestPassword}@127.0.0.1:18443/"]

// Local vs "remote" Omni Core  ALL PROPERTIES
//    args = [ '-verbose', '-rpcwait', '-rpcconnect=127.0.0.1', '-compare', "--omnicore-url=http://${rpcTestUser}:${rpcTestPassword}@127.0.0.1:8332/"]   // Local vs "remote" Omni Core  ALL PROPERTIES

// Print property balance from Localhost
//    args = ['-verbose', '-regtest', '-rpcwait', '-rpcconnect=127.0.0.1', "-property=1"]   // RegTest Localhost
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Implementation-Title': 'BTC/OMNI Status',
                'Automatic-Module-Name': moduleName,
                'Implementation-Version': archiveVersion.get(),
                'Main-Class': application.mainClass
    }
}

// Compile a native image using GraalVM's native-image tool
// Graal must be installed at $GRAALVM_HOME
tasks.register('nativeCompile', Exec) {
    dependsOn jar
    workingDir = projectDir
    executable = "${System.env.GRAALVM_HOME}/bin/native-image"
    args = ['--verbose',
            '--no-fallback',
            '-cp', "${-> configurations.runtimeClasspath.asPath}", // Lazy configuration resolution
            '-jar', jar.archiveFile.get(),
            '-H:Path=build',
            '-H:Name=omnij-consensus-tool',
            '--initialize-at-build-time=com.fasterxml.jackson.annotation.JsonProperty$Access',
            '-H:IncludeResources=logging.properties',
            '-H:ReflectionConfigurationFiles=graal-reflection-config.json',
            '-H:EnableURLProtocols=http,https',
            '-H:+ReportUnsupportedElementsAtRuntime'
    ]
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

tasks.register('regTest', Test) {
    useJUnitPlatform()
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = project.sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperty 'java.util.logging.config.file', "${project.projectDir}/src/integ/logging.properties"
    systemProperties(["omni.test.rpcTestUser"    : rpcTestUser,
                      "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'foundation/omni/cli/**'
}

def currencyID = 1

tasks.register('getCoreConsensus', JavaExec) {
    dependsOn 'classes'
    main = 'foundation.omni.consensus.OmniCoreConsensusTool'
    args = [currencyID, 'build/mastercore_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('getOmniConsensus', JavaExec) {
    dependsOn 'classes'
    main = 'foundation.omni.consensus.OmniwalletConsensusTool'
    args = [currencyID, 'build/omniwallet_consensus.txt']
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('getConsensus') {
    dependsOn 'getCoreConsensus', 'getOmniConsensus'
    doLast {
        logger.info "Consensus files are in build/*_consensus.txt"
    }
}

tasks.register('runOmniConsensusCLI', JavaExec) {
    dependsOn 'classes'
    main = 'foundation.omni.cli.ConsensusCLI'
    args = ['-regtest', '-rpcwait', '-rpcconnect=127.0.0.1', "-property=${currencyID}"]
    classpath = sourceSets.main.runtimeClasspath
}

